import os
import csv

# Uses wordlist file to create dictionary (key, value) where the key
# is each word and its values are an array of strings which will hold
# the filepaths where each word is found
def LoadWordListFromFile(file):
    with open(file, 'r') as f:
        words = f.read().split()
    # Creates dictionary (key, value) pairs where the key is the word
    # and the value is an array of strings (which will be the filepaths)
    return {word: [] for word in words}

# Function to prevent overwriting an existing file
# If output is 'output.txt' and such a file already exists,
# the script will write to 'output_1.txt' instead
def GetAvailableOutputName(output_file_base_name):
    if not os.path.exists(output_file_base_name):
        return output_file_base_name

    name, ext = os.path.splitext(output_file_base_name)
    i = 1
    while True:
        new_name = f"{name}_{i}{ext}"
        if not os.path.exists(new_name):
            return new_name
        i += 1

# Given finished WordList, write output to file at
# specified name.
def WriteOutput(output_file_base_name, WordList):
    output_name = GetAvailableOutputName(output_file_base_name)
    with open(output_name, 'w', newline='', encoding='utf-8') as csvfile:
        writer = csv.writer(csvfile)
        writer.writerow(['Word', 'Filepath', 'Line Number'])
        for word, occurrences in WordList.items():
            if occurrences:
                for filepath, line_num in occurrences:
                    writer.writerow([word, filepath, line_num])
            else:
                writer.writerow([word, 'N/A', '0'])  # Word not found at all


# Scans file/directory (and any subdirectories) for words found in wordlist, then outputs results to specified output file.
def ScanFiles(scanned_filepath, word_list_filepath=None, output_file_base_name=None, case_sensitive=False, WordList=None):
    isRootCall = False
    # Initialize WordList. If part of a recursive call, just use the list generated by the root call.
    if (WordList is None):
        if (word_list_filepath is None):
            raise ValueError("Filepath for WordList should be given at initial function call")
        else:
            WordList = LoadWordListFromFile(word_list_filepath)
            # The call that supplies the word list filepath is therefore the root call.
            isRootCall = True
    if (isRootCall and output_file_base_name==None):
        raise ValueError("File name for eventual output should be given at initial function call")

    # If directory:
    if os.path.isdir(scanned_filepath):
        # For each item in directory:
        for item in os.listdir(scanned_filepath):
            # Record filepath
            full_path = os.path.abspath(os.path.join(scanned_filepath, item))
            # Recursively look through each item in directory
            ScanFiles(
                scanned_filepath=full_path,
                word_list_filepath=None,
                output_file_base_name=None,
                case_sensitive=case_sensitive,
                WordList=WordList
                )
    # If file:
    else:
        try:
            with open(scanned_filepath, 'r', encoding='utf-8', errors='ignore') as file:
                # Track line numbers, starting at 1
                for i, line in enumerate(file, 1):
                    wordsInLine = line.split()
                    if (case_sensitive==False):
                        lowerWords = [w.lower() for w in wordsInLine]
                        for word in WordList:
                            if word.lower() in lowerWords:
                                WordList[word].append((scanned_filepath, i))
                    else:
                        for word in WordList:
                            if word in wordsInLine:
                                WordList[word].append((scanned_filepath, i))
        except Exception:
            pass  # Handle unreadable files silently

    # Once all files and directories read, write to output file
    if (isRootCall and output_file_base_name!=None):
        WriteOutput(output_file_base_name, WordList)

if __name__ == "__main__":
    import sys
    if len(sys.argv) < 4 or len(sys.argv) > 5:
        print("Usage: python ScanFiles.py <scanned_filepath> <word_list_filepath> <output_file_base_name> <case_sensitive (optional)>")
    else:
        scanned_filepath = sys.argv[1]
        word_list_filepath = sys.argv[2]
        output_file_base_name = sys.argv[3]
        if len(sys.argv) == 5:
            case_sensitive = sys.argv[4].lower() == 'true'
        else:
            case_sensitive = False

        ScanFiles(scanned_filepath, word_list_filepath, output_file_base_name, case_sensitive)
